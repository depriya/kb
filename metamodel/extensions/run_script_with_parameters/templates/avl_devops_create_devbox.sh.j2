#!/bin/bash

# Copyright (C) Microsoft Corporation.

# Exit immediately if a command fails
set -e

# Fail if an unset variable is used
set -u

source $(dirname $0)/symphony_stage_script_provider.sh

#region declare command variables & functions
command=""
_command_output=""
_command_status=0

function clear_command_variables() {
    command=""
    _command_output=""
    _command_status=0
}
#endregion declare command variables & functions

#region Declare Constants
LOCATION="westeurope"                                                 #TODO: Discuss. Should this come from the config?
IMAGE="microsoftwindowsdesktop_windows-ent-cpc_win11-21h2-ent-cpc-os" #TODO: Discuss. Should this come from the config?
OEM_Subnet="OEMSubnet"                                                #TODO: Discuss. Should this come from the config?
#endregion Declare Constants

#region Declare SKU Constants
#TODO: Discuss. Should these come from the config?
capacity=1
family="Standard"
compute="general_i_8c32gb256ssd_v2"
size="Standard_DS1_v2"
tier="Standard"
osstoragetype="ssd_256gb"
#endregion Declare SKU Constants

#region Getting config from metamodel config yaml
configEncoded="{{ parameters.input_parameter_to_script }}"
config=$(echo $configEncoded | base64 -d)
#endregion Getting config from metamodel config yaml

#region parameters - get from config
resource_name_primary_prefix=$(echo $config | jq -r '.resource_name_primary_prefix')
resource_name_secondary_prefix=$(echo $config | jq -r '.resource_name_secondary_prefix')
resource_name_customer_short=$(echo $config | jq -r '.resource_name_customer_short')
customer_OEM_suffix=$(echo $config | jq -r '.customer_OEM_suffix')
project_name=$(echo $config | jq -r '.project_name')
environment_stage_short=$(echo $config | jq -r '.environment_stage_short')
subscription_id=$(echo $config | jq -r '.subscription_id')
#endregion parameters - get from config

#region Set the variables
RESOURCE_GROUP="${resource_name_primary_prefix}-${resource_name_secondary_prefix}-${resource_name_customer_short}-${customer_OEM_suffix}-${environment_stage_short}-rg-001"
DEV_CENTER_NAME="${resource_name_primary_prefix}-${resource_name_secondary_prefix}-${resource_name_customer_short}-${customer_OEM_suffix}-${environment_stage_short}-dc"
PROJECT="${resource_name_primary_prefix}-${resource_name_secondary_prefix}-${resource_name_customer_short}-${customer_OEM_suffix}-p-${project_name}-001"
DEVBOX_DEF_NAME="${resource_name_primary_prefix}-${resource_name_secondary_prefix}-${resource_name_customer_short}-${customer_OEM_suffix}-${project_name}-devboxdef"
VNET_NAME="${resource_name_primary_prefix}-${resource_name_secondary_prefix}-${resource_name_customer_short}-${customer_OEM_suffix}-${environment_stage_short}-vnet-001"
DEV_CENTER_NETWORK_CONNECTION_NAME="${resource_name_primary_prefix}-${resource_name_secondary_prefix}-${resource_name_customer_short}-${customer_OEM_suffix}-${project_name}-ntwkcon-001"
NETWORK_CONNECTION_RG_NAME="${resource_name_primary_prefix}-${resource_name_secondary_prefix}-${resource_name_customer_short}-${customer_OEM_suffix}-${environment_stage_short}-${project_name}-rg-ntcon-001"
DEV_CENTER_POOL_NAME="${resource_name_primary_prefix}-${resource_name_secondary_prefix}-${resource_name_customer_short}-${customer_OEM_suffix}-${project_name}-pools-001"
#endregion Set the variables

#region Install Azure Dev Center extension
echo "Installing the Azure Dev Center extension"
clear_command_variables
command="az extension add --name devcenter --upgrade"
execute_command_exit_on_failure "$command" _command_output _command_status
echo "Extension installation complete!"
#endregion Install Azure Dev Center extension

#region Create Dev Box definition
echo "Creating Dev Box definition"
clear_command_variables
command="az devcenter admin devbox-definition create \
    --dev-center $DEV_CENTER_NAME \
    --devbox-definition-name $DEVBOX_DEF_NAME \
    --image-reference \"{\\\"id\\\": \\\"/subscriptions/$subscription_id/resourceGroups/$RESOURCE_GROUP/providers/Microsoft.DevCenter/devcenters/$DEV_CENTER_NAME/galleries/default/images/$IMAGE\\\"}\" \
    --os-storage-type $osstoragetype \
    --resource-group $RESOURCE_GROUP \
	--sku \"{\\\"capacity\\\": $capacity, \\\"family\\\": \\\"$family\\\", \\\"name\\\": \\\"$compute\\\", \\\"size\\\": \\\"$size\\\", \\\"tier\\\": \\\"$tier\\\"}\" \
    --hibernate-support \"Enabled\" \
    --location \"$LOCATION\""
execute_command_exit_on_failure "$command" _command_output _command_status
echo "Dev Box definition created successfully."
#endregion Create Dev Box definition

#region Get OEM subnet ID
echo "Getting OEM subnet ID"
clear_command_variables
command="az network vnet subnet show --name $OEM_Subnet --vnet-name $VNET_NAME --resource-group $RESOURCE_GROUP --query id --output tsv"
commandGetSubnetId_output=""
execute_command_exit_on_failure "$command" commandGetSubnetId_output _command_status
echo "Got OEM subnet ID: $commandGetSubnetId_output"
#endregion Get OEM subnet ID

#region Create Azure Dev Center Network Connection
echo "Creating Azure Dev Center Network Connection"
clear_command_variables
command="az devcenter admin network-connection create \
    --domain-join-type \"AzureADJoin\" \
    --name \"$DEV_CENTER_NETWORK_CONNECTION_NAME\" \
    --resource-group $RESOURCE_GROUP \
    --subnet-id \"$commandGetSubnetId_output\" \
    --location \"$LOCATION\" \
    --networking-resource-group-name \"$NETWORK_CONNECTION_RG_NAME\""
execute_command_exit_on_failure "$command" _command_output _command_status
echo "Azure Dev Center Network Connection created successfully."
#endregion Create Azure Dev Center Network Connection

#region Get Network Connection ID
echo "Getting Network Connection ID"
clear_command_variables
commandGetNetworkConnectionId_output=""
command="az devcenter admin network-connection show --name \"$DEV_CENTER_NETWORK_CONNECTION_NAME\" --resource-group "$RESOURCE_GROUP" --query id --output tsv"
execute_command_exit_on_failure "$command" commandGetNetworkConnectionId_output _command_status
echo "Got Network Connection ID is $commandGetNetworkConnectionId_output"
#endregion Get Network Connection ID

#region Create Dev Center Attached Network
echo "Creating Azure Dev Center attached network"
clear_command_variables
command="az devcenter admin attached-network create \
    --attached-network-connection-name \"xmew1-dop-c-${customer_OEM_suffix}-${project_name}-ntwk-001\" \ #TODO: Check if this is correct, there is another -ntwkcon-001 also in the script
    --network-connection-id \"/subscriptions/$subscription_id/resourceGroups/$RESOURCE_GROUP/providers/Microsoft.DevCenter/networkConnections/$DEV_CENTER_NETWORK_CONNECTION_NAME\" \
    --resource-group $RESOURCE_GROUP \
    --dev-center $DEV_CENTER_NAME"
execute_command_exit_on_failure "$command" _command_output _command_status
echo "Created Azure Dev Center Attached network successfully."
#endregion Create Dev Center Attached Network

#region Create Dev center pool
echo "Creating Azure Dev Center pool"
clear_command_variables
command="az devcenter admin pool create \
    --devbox-definition-name \"$DEVBOX_DEF_NAME\" \
    --local-administrator \"Enabled\" \
    --name \"$DEV_CENTER_POOL_NAME\" \
    --project \"$PROJECT\" \
    --resource-group \"$RESOURCE_GROUP\" \
    --location \"$LOCATION\" \
    --network-connection-name \"xmew1-dop-c-${customer_OEM_suffix}-${project_name}-ntwk-001\"" #TODO: Check if this is correct, there is another -ntwkcon-001 also in the script
execute_command_exit_on_failure "$command" _command_output _command_status
echo "Azure Dev Center Pool created successfully."
#endregion Create Dev center pool

echo_output_dictionary_to_output_file
