#!/usr/bin/env pwsh

# Copyright (C) Microsoft Corporation.

param(
    [Parameter(Mandatory = $true)][string] $Arg
)

# Exit immediately if a command fails
$ErrorActionPreference = "Stop"

# Fail if an unset variable is used
Set-StrictMode -Version Latest

. $PSScriptRoot/symphony_stage_script_provider.ps1 "$($Arg)"

#region Getting config from metamodel config yaml
$configEncoded = "{{ parameters.input_parameter_to_script }}"
$config = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($configEncoded)) | ConvertFrom-Json
#endregion Getting config from metamodel config yaml

#region parameters - get from config
$STAGING_SA_SUBSCRIPTION_ID = "$($config.customer_stamp_config.target_subscription_id)" 
$STAGING_SA_RESOURCE_GROUP = "$($config.resource_name_primary_prefix)-$($config.resource_name_secondary_prefix)-c-$($config.project_config.oem_identifier)-$($config.project_config.environment_stage[0])-rg-001" 
$STAGING_SA_NAME = "$($config.resource_name_primary_prefix)$($config.resource_name_secondary_prefix)c$($config.project_config.oem_identifier)$($config.project_config.environment_stage[0])st" 
$STAGING_KV_NAME = "$($config.resource_name_primary_prefix)-$($config.resource_name_secondary_prefix)-s-$($config.project_config.environment_stage[0])-kv-001" 

$VERSION = "$($config.project_config.version)"
$PROJECT_NAME = "$($config.project_config.project_name)".ToLower()
$PROJECT_FOLDER_PATH = "$($config.project_config.project_name)_$($config.project_config.version)"

$MODEL_STACK = $config.model_stack.ModulesLibrary 
#endregion parameters - get from config

$WORKING_DIR = Split-Path -Path "$($Arg)" -Parent

if (Test-Path "$($WORKING_DIR)/$($PROJECT_FOLDER_PATH)") {
    Write-Host "Removing existing project folder $($PROJECT_FOLDER_PATH)"
    Remove-Item -Path "$($WORKING_DIR)/$($PROJECT_FOLDER_PATH)" -Recurse -Force
    Write-Host "Removed existing project folder $($PROJECT_FOLDER_PATH)"
}

New-Item -Path "$($WORKING_DIR)" -Name "$($PROJECT_FOLDER_PATH)" -ItemType "directory" -Force
Set-Location "$($WORKING_DIR)/$($PROJECT_FOLDER_PATH)"

Write-Host "Collecting model stack files"
$MODEL_STACK_LIBS = $MODEL_STACK | Get-Member -MemberType Properties | Select-Object -ExpandProperty Name
foreach ($library in $MODEL_STACK_LIBS) {
    foreach ($module in $MODEL_STACK."$($library)") {
        if ($module | Get-Member -Name DownloadSource -MemberType Properties) {
            if ($module.DownloadSource.Type -eq "GitHub") {
                $github_pat_token = $(az keyvault secret show --vault-name $STAGING_KV_NAME --name $($module.DownloadSource.Secret) --query value -o tsv)
                $LocationURL = $module.DownloadSource.LocationURL
                $repo_name = $LocationUrl -replace '\.git$', '' -split '/' | Select-Object -Last 1
                if (-not (Test-Path -LiteralPath $repo_name)) {
                    Write-Host "Cloning $LocationURL"
                    git clone $LocationUrl.Replace('github.com', "$($github_pat_token)@github.com")
                    Write-Host "Cloning $LocationURL completed"
                }
                # foreach ($subSys in $module.SubSys) {
                #     if ( -not [string]::IsNullOrWhiteSpace($subSys.ModuleFilePath)) {
                #         Write-Host "Copying from ModuleFilePath - $PWD/$($subSys.ModuleFilePath)"
                #         Copy-Item "$PWD/$($subSys.ModuleFilePath)" "$PWD" -Recurse -Force
                #         Write-Host "Copying from ModuleFilePath - $PWD/$($subSys.ModuleFilePath) completed"
                #     }
                #     foreach ($subSysParam in $subSys.SubSysParam) {
                #         if (-not [string]::IsNullOrWhiteSpace($subSysParam.ParamFilePath)) {
                #             Write-Host "Copying from ParamFilePath - $PWD/$($subSysParam.ParamFilePath)"
                #             Copy-Item "$PWD/$($subSysParam.ParamFilePath)" "$PROJECT_FOLDER_PATH" -Recurse -Force
                #             Write-Host "Copying from ParamFilePath - $PWD/$($subSysParam.ParamFilePath)"
                #         }
                #     }
                # }
            }       
        }
    }
}
Write-Host "Completed collection of model stack files"
#endregion collect model stack files

#region compress project folder
Write-Host "Compressing project folder"
Set-Location "$($WORKING_DIR)/$($PROJECT_FOLDER_PATH)"
Compress-Archive -Path . -DestinationPath "$($WORKING_DIR)/$($PROJECT_FOLDER_PATH).zip" -Force
Write-Host "Completed compressing project folder"
#endregion compress project folder

#region Get Account key for staging storage account
Write-Host "Getting storage account key for staging storage account"
$storage_key = 
az storage account keys list `
    -g $($STAGING_SA_RESOURCE_GROUP) `
    -n $($STAGING_SA_NAME) `
    --query "[0].value" `
    -o tsv
Write-Host "Got storage account key for staging storage account."
#endregion Get Account key for staging storage account

#region Creating container in staging storage account and
Write-Host "Creating container in staging storage account"
az storage container create `
    --account-name $($STAGING_SA_NAME) `
    --account-key "$($storage_key)" `
    -n $($PROJECT_NAME) `
    --only-show-errors
Write-Host "Completed creating container in staging storage account."
#endregion Creating container in staging storage account

#region upload to staging storage account
Write-Host "Uploading to compressed zip to staging storage account"
az storage blob upload `
    --account-name $($STAGING_SA_NAME) `
    --account-key "$($storage_key)" `
    -c $($PROJECT_NAME) `
    -n $($VERSION) `
    -f "$($WORKING_DIR)/$($PROJECT_FOLDER_PATH).zip" `
    --overwrite `
    --only-show-errors
Write-Host "Completed upload to staging storage account."
#endregion upload to staging storage account

exit 0