#!/usr/bin/env pwsh

# Copyright (C) Microsoft Corporation.

param(
    [Parameter(Mandatory = $true)][string] $Arg
)

# Exit immediately if a command fails
$ErrorActionPreference = "Stop"

# Fail if an unset variable is used
Set-StrictMode -Version Latest

. $PSScriptRoot/symphony_stage_script_provider.ps1 "$($Arg)"

#region Getting config from metamodel config yaml
$configEncoded = "{{ parameters.input_parameter_to_script }}"
$config = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($configEncoded)) | ConvertFrom-Json
#endregion Getting config from metamodel config yaml

#region parameters - get from config
$STAGING_SA_SUBSCRIPTION_ID = "$($config.customer_stamp_config.target_subscription_id)" 
$STAGING_SA_RESOURCE_GROUP = "$($config.resource_name_primary_prefix)-$($config.resource_name_secondary_prefix)-c-$($config.project_config.oem_identifier)-$($config.project_config.environment_stage[0])-rg-001" 
$STAGING_SA_NAME = "$($config.resource_name_primary_prefix)$($config.resource_name_secondary_prefix)c$($config.project_config.oem_identifier)$($config.project_config.environment_stage[0])st" 
$STAGING_KV_NAME = "$($config.resource_name_primary_prefix)-$($config.resource_name_secondary_prefix)-s-$($config.project_config.environment_stage[0])-kv-001" 

$VERSION = "$($config.project_config.version)"
$PROJECT_NAME = "$($config.project_config.project_name)".ToLower()
$PROJECT_FOLDER_PATH = "$($config.project_config.project_name)_$($config.project_config.version)"

$MODEL_STACK = $config.model_stack 

#TODO: This should be rewritten to use the updated template for the path. Check if a single file can be downloaded using the secret without cloning the entire repo.
#TODO: Should this section collect additionl artifacts? What sections should it collect?
#TODO: Create a "Module_Library.yml", confirm the structure of this file.
#region collect model stack files
Write-Host "Collecting model stack files"
$MODEL_STACK_PROPERTIES = $MODEL_STACK | Get-Member -MemberType Properties | Select-Object -ExpandProperty Name
$ARRAY_TO_PROCESS = @()
foreach ($property in $MODEL_STACK_PROPERTIES) {
    Write-Host "Processing property: $property, found type: $($MODEL_STACK.$property.GetType().BaseType.Name)"
    if ($MODEL_STACK.$property.GetType().BaseType.Name -eq "Object") {
        $nestedModuleProperties = $MODEL_STACK.$property | Get-Member -MemberType Properties | Select-Object -ExpandProperty Name
        foreach ($nestedModuleProperty in $nestedModuleProperties) {
            Write-Host "Processing nested property: $nestedModuleProperty, found type: $($MODEL_STACK.$property.$nestedModuleProperty.GetType().BaseType.Name)"
            if ($MODEL_STACK.$property.$nestedModuleProperty.GetType().BaseType.Name -eq "Array") {
                Write-Host "Adding to array to process: $($MODEL_STACK.$property.$nestedModuleProperty)"
                $ARRAY_TO_PROCESS += $MODEL_STACK.$property.$nestedModuleProperty
            }
        }
    }
    elseif ($MODEL_STACK.$property.GetType().BaseType.Name -eq "Array") {
        Write-Host "Adding to array to process: $property"
        $ARRAY_TO_PROCESS += $MODEL_STACK.$property
    }
}
foreach ($item in $ARRAY_TO_PROCESS) {
    if ($item.GetType().BaseType.Name -eq "Object" ) {
        if ($item.PSObject.Properties.Name -contains "SubSys" -and $item.SubSys.GetType().BaseType.Name -eq "Array" -and $item.PSObject.Properties.Name -contains "DownloadSource") {
            if ($item.DownloadSource.Type -eq "GitHub") {
                $github_pat_token = $(az keyvault secret show --vault-name $STAGING_KV_NAME --name $($item.DownloadSource.Secret) --query value -o tsv)
                $LocationURL = $item.DownloadSource.LocationURL
                $segments = $LocationURL -split '/'
                $repo_organisation = $segments[3]
                $repo_name = $segments[4] -replace '\.git$', ''
                if (-not (Test-Path -LiteralPath $repo_name)) {
                    try {
                        git clone https://$($github_pat_token)@github.com/$($repo_organisation)/$($repo_name).git
                    }
                    catch {
                        Write-Error "Unable to clone"
                    }
                }
            }
            foreach ($subSys in $item.SubSys) {
                if ($subSys.GetType().BaseType.Name -eq "Object" -and $subSys.PSObject.Properties.Name -contains "ModuleFilePath" -and $null -ne $subSys.ModuleFilePath) {
                    Write-Host "Copying from ModuleFilePath - $PWD/$($subSys.ModuleFilePath)"
                    Copy-Item "$PWD/$($subSys.ModuleFilePath)" "$PWD" -Recurse -Force
                    if ($subSys.PSObject.Properties.Name -contains "SubSysParam" -and $subSys.SubSysParam.GetType().BaseType.Name -eq "Array") {
                        foreach ($subSysParam in $subSys.SubSysParam) {
                            if ($subSysParam.GetType().BaseType.Name -eq "Object" -and $subSysParam.PSObject.Properties.Name -contains "ParamFilePath" -and $null -ne $subSysParam.ParamFilePath) {
                                Write-Host "Copying from ParamFilePath - $PWD/$($subSysParam.ParamFilePath)"
                                Copy-Item "$PWD/$($subSysParam.ParamFilePath)" "$PROJECT_FOLDER_PATH" -Recurse -Force
                            }
                        }
                    }
                }
            }
        }
    }
}
Write-Host "Completed copying model stack files"
#endregion collect model stack files

#region compress project folder
Write-Host "Compressing project folder"
Set-Location $PROJECT_FOLDER_PATH
Compress-Archive -Path . -DestinationPath "$($PROJECT_FOLDER_PATH).zip" -Force
Write-Host "Completed compressing project folder"
#endregion compress project folder

#region Get Account key for staging storage account
Write-Host "Getting storage account key for staging storage account"
$command = @"
az storage account keys list `
    -s $($STAGING_SA_SUBSCRIPTION_ID) `
    -g $($STAGING_SA_RESOURCE_GROUP) `
    -n $($STAGING_SA_NAME) `
    --query "[0].value" `
    -o tsv
"@
$storage_key = ""
$command_status = 0
Invoke-Command-ExitOnFailure -c $command -o $storage_key -s $command_status

Write-Host "Got storage account key for staging storage account."
#endregion Get Account key for staging storage account

#region Creating container in staging storage account and
Write-Host "Creating container in staging storage account"
$command = @"
az storage container create `
    --account-name $($STAGING_SA_NAME) `
    --account-key "$($storage_key)" `
    -n $($PROJECT_NAME) `
    --only-show-errors
"@
$command_output = ""
$command_status = 0
Invoke-Command-ExitOnFailure -c $command -o $command_output -s $command_status

Write-Host "Completed creating container in staging storage account."
#endregion Creating container in staging storage account

#region upload to staging storage account
Write-Host "Uploading to compressed zip to staging storage account"
$command = @"
az storage blob upload `
    --account-name $($STAGING_SA_NAME) `
    --account-key "$($storage_key)" `
    -c $($PROJECT_NAME) `
    -n $($VERSION) `
    -f "$($PROJECT_FOLDER_PATH).zip" `
    --overwrite `
    --only-show-errors
"@
$command_output = ""
$command_status = 0
Invoke-Command-ExitOnFailure -c $command -o $command_output -s $command_status

Write-Host "Completed upload to staging storage account."
#endregion upload to staging storage account

Write-OutputDictionaryToOutputFile
exit 0
