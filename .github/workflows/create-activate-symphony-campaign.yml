name: Create and Activate Symphony Campaign

on:
  workflow_dispatch:
    # inputs:
    #     ResourceGroup:
    #         description: "Resource group"
    #         required: true
    #         default: 
    #     storageAccount:
    #         description: "Storage account"
    #         required: true
    #     projectName:
    #         description: "Project name that maps to ContainerName"
    #         required: true
    #     version:
    #         description: "Version for artifact"
    #         required: true
      
permissions:
      id-token: write
      contents: read

jobs:
    build-and-deploy:
      #runs-on: xmew1-dop-s-stamp-d-vm-002
      runs-on: xmew1-dop-s-stamp-d-vm-003
      environment: sub-AVL_DevopsPilot
      env:
        METAMODEL_YAML: ${{ github.workspace }}/metamodel/avl_sdv_template.yaml
      steps:
        - name: 'Az CLI login'
          uses: azure/login@v1
          with:
            client-id: ${{ secrets.AZURE_CLIENT_ID }}
            tenant-id: ${{ secrets.AZURE_TENANT_ID }}
            subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
            #enable-AzPSSession: true

    
        - name: Checkout code
          uses: actions/checkout@v3
        
        - name: Check AZ login
          shell: pwsh
          run: |
            echo "${{ github.workspace }}"
            $customer_OEM_suffix = (yq '.config.project_config.oem_identifier' "${{ env.METAMODEL_YAML }}").Trim('"')
            $project_name = (yq '.config.project_config.project_name' "${{ env.METAMODEL_YAML }}").Trim('"')
            $resource_name_primary_prefix = (yq '.config.resource_name_primary_prefix' "${{ env.METAMODEL_YAML }}").Trim('"')
            $resource_name_secondary_prefix = (yq '.config.resource_name_secondary_prefix' "${{ env.METAMODEL_YAML }}").Trim('"')
            $resource_name_shared_short = "s"
            $environment_stage = (yq '.config.project_config.environment_stage' "${{ env.METAMODEL_YAML }}").Trim('"')
            $meta_model_outputs_file_share_name = (yq '.config.shared_stamp_config.meta_model_outputs_file_share_name' "${{ env.METAMODEL_YAML }}").Trim('"')
          
            $ResourceGroup =  "$($resource_name_primary_prefix)-$($resource_name_secondary_prefix)-$($resource_name_shared_short)-stamp-$($environment_stage[0])-rg-001"
            $storageAccount = "$($resource_name_primary_prefix)$($resource_name_secondary_prefix)$($resource_name_shared_short)$($environment_stage[0])st"
            $sourcePath = "$($meta_model_outputs_file_share_name)/$($customer_OEM_suffix)/$($project_name)/$($meta_model_outputs_file_share_name)"

            $subscriptionID = "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
            
            $storage_key=$(az storage account keys list --subscription "$subscriptionID" -g "$ResourceGroup" -n "$storageAccount" --query "[0].value" -o tsv)
  
            mkdir avl_devops_pilot
            cd avl_devops_pilot
            az storage file download-batch --account-key "$storage_key" --account-name "$storageAccount" --destination . --source $sourcePath
            ls -ltr
            
            Get-ChildItem -Recurse -Filter "*.ps1" | ForEach-Object {
              (Get-Content $_.FullName) -replace "<<github_pat_token>>", "${{ secrets.GH_TOKEN }}" | Set-Content $_.FullName
              (Get-Content $_.FullName) -replace "<<jfrog_token>>", "${{ secrets.JFROG_EDGE_TOKEN }}" | Set-Content $_.FullName
            }
            
        - name: Run Campaign
          run: |
            pwd
            ls -ltr
            cd "${{ github.workspace }}"/avl_devops_pilot/deploy_avl_symphony_campaign/
            token=$(curl -X POST -d '{"username":"admin", "password":""}' http://192.168.0.102:8082/v1alpha2/users/auth | jq -r '.accessToken')
            curl -X POST -d @deploy_avl_devops_symphony_campaign.json -H "Authorization: Bearer $token" http://192.168.0.102:8082/v1alpha2/campaigns/deploy_avl_devops_symphony_campaign_test
            curl -X POST -d @symphony_campaign_activation.json -H "Authorization: Bearer $token" http://192.168.0.102:8082/v1alpha2/activations/registry/deploy_avl_devops_symphony_campaign_test

            #TODO: Wait for campaign to complete, implement a polling mechanism on loop to query the campaign status