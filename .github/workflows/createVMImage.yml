name: Create VM Image

on:
  workflow_dispatch:
    inputs:
        virtualMachineName:
            description: "VM Name"
            required: false
        ModelConnectBaseVersion:
            description: "Model Connect Base Version"
            required: false
            default: "2023.1"
        ModelConnectVersion:
            description: "Model Connect Version"
            required: false
            default: "2023.1.2"
        ConcertoVersion:
            description: "Concerto Version"
            required: false
            default: "5.7.5"
        ConcertoReleaseVersion:
            description: "Concerto Release Version"
            required: false
            default: "5_R7.5" 
        LicenseServer:
            description: "License server IP"
            required: false
            default: "192.168.0.123"
        VMWindowsVersion:
          description: "Windows version"
          required: false
          type: choice
          options:
            - MicrosoftWindowsDesktop:Windows-10:win10-22h2-pro-g2:latest
        LicenceType:
          description: "Licence Type"
          required: false
          type: choice
          options:
            - "Windows_Client"
            - "Windows_Server"
   


permissions:
      id-token: write
      contents: read

jobs:
    build-and-deploy:
      runs-on: xmew1-dop-s-stamp-d-vm-003
      environment: sub-AVL_DevopsPilot
      steps:
        - name: 'Az CLI login'
          uses: azure/login@v1
          with:
            client-id: ${{ secrets.AZURE_CLIENT_ID }}
            tenant-id: ${{ secrets.AZURE_TENANT_ID }}
            subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
            #enable-AzPSSession: true

    
        - name: Checkout code
          uses: actions/checkout@v3
        
        - name: Run Script
          shell: pwsh
          run: |
            echo "${{ github.workspace }}"
            $subscriptionID = "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
            $storageAccount = "${{ vars.STORAGEACCOUNT }}"
            $containerName = "${{ vars.CONTAINERNAME }}".ToLower()
            $virtualMachineName = "${{ inputs.virtualMachineName }}"
            $virtualMachineRGName = "${{ vars.VIRTUALMACHINERGNAME }}"
            $vnetName="${{ vars.SHAREDSTAMPVNETNAME }}"
            $subnetName="${{ vars.SHAREDSTAMPVMSUBNET }}"
            $AdminUserName="${{ vars.VMIMAGEUSER }}"
            $AdminUserPassword="${{ secrets.VMIMAGEUSERPASSWORD }}"
            $gallery_name="${{ vars.IMAGEGALLERYNAME }}"
            $command_id="RunPowerShellScript"
            $JfrogToken =  "${{ secrets.JFROG_EDGE_TOKEN }}"
            $MCBaseVersion = "${{ inputs.ModelConnectBaseVersion }}"
            $MCVersion = "${{ inputs.ModelConnectVersion }}"
            $ConcertoVersion = "${{ inputs.ConcertoVersion }}"
            $ConcertoVersionR = "${{ inputs.ConcertoReleaseVersion }}"
            $LicenseServer = "${{ inputs.LicenseServer }}"
            $LicenceServerPort = "27000"
            $LicenceType = "${{ inputs.LicenceType }}"
            $WindowsImage = "${{ inputs.VMWindowsVersion }}"
            $parts = $WindowsImage -split ":"
            $image_publisher = $parts[0]
            $image_offer = $parts[1]
            $sku = $parts[2]
            $version = $parts[3]
            $image_name="$image_offer`ModelConnect$MCBaseVersion`Concerto$ConcertoVersion"
            $image_version=$(date '+%Y.%m%d.%H%M')
            echo $image_name
            $storage_key=$(az storage account keys list --subscription "$subscriptionID" -g "$virtualMachineRGName" -n "$storageAccount" --query "[0].value" -o tsv)
            # Create VM 
            az vm create --name $virtualMachineName --resource-group $virtualMachineRGName --image $WindowsImage --license-type "$LicenceType" --nic-delete-option "Delete" --nsg "" --public-ip-address "" --vnet-name $vnetName --admin-username $AdminUserName --admin-password $AdminUserPassword --subnet $subnetName --security-type "TrustedLaunch"
            
            cd ${{ github.workspace }}/.github
            # #Copy scripts from Storage account required for SoftwareInstallation
            # Start-Sleep -Seconds 240
            az vm run-command invoke --resource-group $virtualMachineRGName --name $virtualMachineName --command-id $command_id --scripts "@scriptcopy.ps1" --parameters "StorageAccountName=$storageAccount" "ContainerName=$containerName" "AccountKey=$storage_key" "JfrogToken=$JfrogToken" "MCBaseVersion=$MCBaseVersion" "MCVersion=$MCVersion" "ConcertoVersion=$ConcertoVersion" "ConcertoVersionR=$ConcertoVersionR" "LicenseServer=$LicenseServer" "LicenceServerPort=$LicenceServerPort"
            # Model Connect Installation
            # az vm run-command invoke --resource-group $virtualMachineRGName --name $virtualMachineName --command-id $command_id --scripts "cmd.exe /c C:\Temp\ModelConnectInstall.cmd"
            # #Restart Virtual Machine after Model Connect Installation
            # az vm restart -n $virtualMachineName -g $virtualMachineRGName --verbose
            # Start-Sleep -Seconds 60

            # Install Model Connect Patch
            # az vm run-command invoke --resource-group $virtualMachineRGName --name $virtualMachineName --command-id $command_id --scripts "cmd.exe /c C:\Temp\ModelConnectUpdate.cmd"

            # Install Concerto
            az vm run-command invoke --resource-group $virtualMachineRGName --name $virtualMachineName --command-id $command_id --scripts "cmd.exe /c C:\Temp\concertoInstall.cmd"


            # Run Sysprep on the virtual machine
            az vm run-command invoke --resource-group $virtualMachineRGName --name $virtualMachineName --command-id $command_id --scripts "@sysprep.ps1"

            Start-Sleep -Seconds 60
            
            # Create Image
            $vm_states=$(az vm get-instance-view -g $virtualMachineRGName -n $virtualMachineName --query "instanceView.statuses[].displayStatus" -o tsv);
            $deallocateresult=$(az vm deallocate -g $virtualMachineRGName -n $virtualMachineName)
            $generalizeresult=$(az vm generalize -g $virtualMachineRGName -n $virtualMachineName)
            $vm_id=$(az vm show -g $virtualMachineRGName -n $virtualMachineName --query "id" -o tsv)
            $image_definition_result=$(az sig image-definition create --resource-group "$virtualMachineRGName" --gallery-name "$gallery_name" --gallery-image-definition "$image_name" --publisher "$image_publisher" --offer "$image_offer" --sku "$image_name" --os-type Windows --os-state Generalized --features SecurityType=TrustedLaunch --hyper-v-generation V2 --architecture x64)
            $image_version_result=$(az sig image-version create --resource-group "$virtualMachineRGName" --gallery-name "$gallery_name" --gallery-image-definition "$image_name" --gallery-image-version "$image_version" --virtual-machine "$vm_id")
            $delete_result=$(az vm delete -g $virtualMachineRGName -n $virtualMachineName --yes)
